(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{359:function(v,a,t){"use strict";t.r(a);var _=t(42),s=Object(_.a)({},(function(){var v=this,a=v.$createElement,t=v._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"web"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web"}},[v._v("#")]),v._v(" Web")]),v._v(" "),t("h2",{attrs:{id:"webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[v._v("#")]),v._v(" webpack")]),v._v(" "),t("h3",{attrs:{id:"前端静态资源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端静态资源"}},[v._v("#")]),v._v(" 前端静态资源")]),v._v(" "),t("h4",{attrs:{id:"前端开发我们经常会引入哪些静态资源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端开发我们经常会引入哪些静态资源"}},[v._v("#")]),v._v(" 前端开发我们经常会引入哪些静态资源？")]),v._v(" "),t("ul",[t("li",[v._v("js\n"),t("ul",[t("li",[v._v("js")]),v._v(" "),t("li",[v._v("jsx")]),v._v(" "),t("li",[v._v("TypeScript")])])]),v._v(" "),t("li",[v._v("css\n"),t("ul",[t("li",[v._v("scss")]),v._v(" "),t("li",[v._v("less")]),v._v(" "),t("li",[v._v("css")])])]),v._v(" "),t("li",[v._v("images\n"),t("ul",[t("li",[v._v("jpg")]),v._v(" "),t("li",[v._v("png")]),v._v(" "),t("li",[v._v("gif")]),v._v(" "),t("li",[v._v("bmg")]),v._v(" "),t("li",[v._v("svg")])])]),v._v(" "),t("li",[v._v("字体文件\n"),t("ul",[t("li",[v._v("svg")]),v._v(" "),t("li",[v._v("ttf")]),v._v(" "),t("li",[v._v("eot")]),v._v(" "),t("li",[v._v("woff")])])]),v._v(" "),t("li",[v._v("模板文件")])]),v._v(" "),t("h4",{attrs:{id:"静态资源过多有什么缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态资源过多有什么缺点"}},[v._v("#")]),v._v(" 静态资源过多有什么缺点？")]),v._v(" "),t("p",[v._v("1、网页加载速度慢，因为要发起很多二次请求"),t("br"),v._v("\n2、要处理错综复杂的包依赖关系")]),v._v(" "),t("h4",{attrs:{id:"如何解决上面两个问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何解决上面两个问题"}},[v._v("#")]),v._v(" 如何解决上面两个问题？")]),v._v(" "),t("p",[v._v("1、压缩、合并、精灵图、图片的Base64编码（减少二次请求，只适用于小图片）"),t("br"),v._v("\n2、使用之前学过的requireJS，也可以使用webpack")]),v._v(" "),t("h3",{attrs:{id:"webpack-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-是什么"}},[v._v("#")]),v._v(" webpack 是什么")]),v._v(" "),t("h4",{attrs:{id:"gulp-和-webpack-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gulp-和-webpack-的区别"}},[v._v("#")]),v._v(" Gulp 和 Webpack 的区别")]),v._v(" "),t("h3",{attrs:{id:"webpack-的基本使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的基本使用"}},[v._v("#")]),v._v(" Webpack 的基本使用")]),v._v(" "),t("h2",{attrs:{id:"前端性能分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端性能分析"}},[v._v("#")]),v._v(" 前端性能分析")]),v._v(" "),t("h2",{attrs:{id:"前端性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端性能优化"}},[v._v("#")]),v._v(" 前端性能优化")]),v._v(" "),t("h3",{attrs:{id:"优化的目的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化的目的"}},[v._v("#")]),v._v(" 优化的目的")]),v._v(" "),t("ul",[t("li",[v._v("优化的目的在于让页面加载的更快，对用户操作响应更及时，为用户带来更好的用户体验")]),v._v(" "),t("li",[v._v("对于开发者来说优化能够减少页面请求数，能够节省资源")])]),v._v(" "),t("h3",{attrs:{id:"网络优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络优化"}},[v._v("#")]),v._v(" 网络优化")]),v._v(" "),t("ul",[t("li",[v._v("减少 http 请求数，css，js, image 等文件压缩合并，合理设置 http 请求缓存。")]),v._v(" "),t("li",[v._v("样式放头部，脚本放底部。")]),v._v(" "),t("li",[v._v("使用 CDN。")]),v._v(" "),t("li",[v._v("按需加载，显示进度条或者 loading")])]),v._v(" "),t("h3",{attrs:{id:"css-优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css-优化"}},[v._v("#")]),v._v(" css 优化")]),v._v(" "),t("ul",[t("li",[v._v("免使用 CSS 表达式")]),v._v(" "),t("li",[v._v("可能减少 CSS 选择器的层级")]),v._v(" "),t("li",[v._v("少 TABLE 布局")]),v._v(" "),t("li",[v._v("除空的样式")]),v._v(" "),t("li",[v._v("片在加载前提前指定宽高或者脱离文档流，可避免加载后的重新计算导致的页面回流；")])]),v._v(" "),t("h3",{attrs:{id:"js-优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-优化"}},[v._v("#")]),v._v(" JS 优化")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("优化闭包的使用")]),t("br"),v._v("\n过多使用闭包会产生很多不销毁的内存，内存过多会导致内存溢出。")]),v._v(" "),t("li",[t("strong",[v._v("避免使用 iframe")]),t("br"),v._v("\niframe 会嵌入其它页面，父页面渲染的时候，同时渲染子页面，渲染进度会变慢。")]),v._v(" "),t("li",[t("strong",[v._v("减少 dom 操作")]),t("br"),v._v("\n减少页面重绘和重排。使用 css3 动画")]),v._v(" "),t("li",[t("strong",[v._v("尽可能使用事件委托")]),t("br"),v._v("\n事件委托可以给动态元素绑定事件，而且基于事件委托实现，整体性能会比一个一个绑定事件高 50%。")]),v._v(" "),t("li",[t("strong",[v._v("注意防抖和节流")])])]),v._v(" "),t("h3",{attrs:{id:"图片优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图片优化"}},[v._v("#")]),v._v(" 图片优化")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("图片尽量用 css3 代替")]),t("br"),v._v("\n比如说要实现修饰效果，如半透明、边框、圆角、阴影、渐变等，在当前主流浏览器中都可以用 CSS 达成")]),v._v(" "),t("li",[t("strong",[v._v("矢量图 SVG 替代位图")]),t("br"),v._v("\n对于绝大多数图案、图标等，矢量图更小，且可缩放而无需生成多套图。现在主流浏览器都支持 SVG 了，所以可放心使用")]),v._v(" "),t("li",[t("strong",[v._v("恰当的图片格式")]),t("br"),v._v("\n我们常见的图片格式有 JPEG、GIF、PNG。基本上，内容图片多为照片之类的，适用于 JPEG。而修饰图片通常更适合用无损压缩的 PNG。GIF 基本上除了 GIF 动画外不要使用。且动画的话，也更建议用 video 元素和视频格式，或用 SVG 动画取代。")]),v._v(" "),t("li",[t("strong",[v._v("按照 HTTP 协议设置合理的缓存")])]),v._v(" "),t("li",[t("strong",[v._v("使用字体图标 webfont、CSS Sprites 等")])]),v._v(" "),t("li",[t("strong",[v._v("用 CSS 或 JavaScript 实现预加载")]),t("br"),v._v("\nWebP 图片格式能给前端带来的优化，WebP 支持无损、有损压缩，动态、静态图片，压缩比率优于 GIF、JPEG、JPEG2000、PG 等格式，非常适合用于网络等图片传输")]),v._v(" "),t("li",[t("strong",[v._v("图片转为 base64 格式")]),t("br"),v._v(" "),t("em",[v._v("图片的 base64 编码就是可以将一副图片数据编码成一串字符串，使用该字符串代替图像地址")]),v._v(" "),t("ul",[t("li",[v._v("提升性能:"),t("br"),v._v("\n网页上的每一个图片，都是需要消耗一个 http 请求下载而来的, 图片的下载始终都要向服务器发出请求，要是图片的下载不用向服务器发出请求，base64 可以随着 HTML 的下载同时下载到本地.减少 https 请求")]),v._v(" "),t("li",[v._v("加密:"),t("br"),v._v("\n让用户一眼看不出图片内容 , 只能看到编码")]),v._v(" "),t("li",[v._v("方便引用:"),t("br"),v._v("\n在多个文件同时使用某些图片时, 可以把图片转为 base64 格式的文件, 把样式放在全局中, 比如 common.css, 以后在用的时候就可以直接加类名, 二不需要多层找文件路径, 会提升效率")])])])]),v._v(" "),t("h3",{attrs:{id:"图片懒加载与预加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图片懒加载与预加载"}},[v._v("#")]),v._v(" 图片懒加载与预加载")]),v._v(" "),t("h4",{attrs:{id:"图片懒加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图片懒加载"}},[v._v("#")]),v._v(" 图片懒加载")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),t("p",[v._v("滚到到图片的位置时才加载该图片")])]),v._v(" "),t("p",[v._v("原理就是暂时不设置图片的 src 属性，而是将图片的 url 隐藏起来"),t("br"),v._v("\n比如先写在 data-src 里面，等某些事件触发的时候(比如滚动到底部，点击加载图片)再将图片真实的 url 放进 src 属性里面，从而实现图片的延迟加载")]),v._v(" "),t("h4",{attrs:{id:"图片预加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图片预加载"}},[v._v("#")]),v._v(" 图片预加载")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),t("p",[v._v("提前加载图片以优化体验")])]),v._v(" "),t("p",[v._v("图片预加载，是指在一些需要展示大量图片的网站，实现图片的提前加载，从而提升用户体验。")]),v._v(" "),t("p",[v._v("常用的方式有两种，一种是隐藏在 css 的 background 的 url 属性里面，一种是通过 javascript 的 Image 对象设置实例对象的 src 属性实现图片的预加载")]),v._v(" "),t("h2",{attrs:{id:"路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[v._v("#")]),v._v(" 路由")]),v._v(" "),t("h3",{attrs:{id:"后端路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后端路由"}},[v._v("#")]),v._v(" 后端路由")]),v._v(" "),t("p",[v._v("普通网站，所有的超链接都是 URL地址"),t("br"),v._v("\n所有的URL地址都对应服务器上对应的资源")]),v._v(" "),t("h3",{attrs:{id:"前端路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端路由"}},[v._v("#")]),v._v(" 前端路由")]),v._v(" "),t("p",[t("strong",[v._v("主要通过 URL 中的 hash（#）来实现不同页面之间的切换")]),t("br"),v._v("\nhash 有一个特点，HTTP 请求不会包含 hash 的相关内容，比如 www.baidu.com#login")]),v._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[v._v("所以单页面应用跳转，主要用 hash 实现")]),v._v(" "),t("p",[v._v("这种通过 hash 来改变切换页面的方式，叫做"),t("strong",[v._v("前端路由")])])]),v._v(" "),t("h3",{attrs:{id:"前后路由的对比差异"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前后路由的对比差异"}},[v._v("#")]),v._v(" 前后路由的对比差异")]),v._v(" "),t("h2",{attrs:{id:"前端工程化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端工程化"}},[v._v("#")]),v._v(" 前端工程化")]),v._v(" "),t("h3",{attrs:{id:"模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[v._v("#")]),v._v(" 模块化")]),v._v(" "),t("h3",{attrs:{id:"组件化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[v._v("#")]),v._v(" 组件化")]),v._v(" "),t("h2",{attrs:{id:"单页应用和多页应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单页应用和多页应用"}},[v._v("#")]),v._v(" 单页应用和多页应用")]),v._v(" "),t("h2",{attrs:{id:"前端缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端缓存"}},[v._v("#")]),v._v(" 前端缓存")]),v._v(" "),t("h3",{attrs:{id:"http-缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存"}},[v._v("#")]),v._v(" HTTP 缓存")]),v._v(" "),t("h3",{attrs:{id:"浏览器缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[v._v("#")]),v._v(" 浏览器缓存")]),v._v(" "),t("h3",{attrs:{id:"应用程序缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用程序缓存"}},[v._v("#")]),v._v(" 应用程序缓存")]),v._v(" "),t("h2",{attrs:{id:"seo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#seo"}},[v._v("#")]),v._v(" SEO")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("Search Engine Optimization")]),v._v(" "),t("p",[v._v("搜索引擎优化")])]),v._v(" "),t("h3",{attrs:{id:"每一个程序员都应该了解-seo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#每一个程序员都应该了解-seo"}},[v._v("#")]),v._v(" 每一个程序员都应该了解 SEO")]),v._v(" "),t("p",[v._v("利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名"),t("br"),v._v("\n目的是让其在行业内占据领先地位，获得品牌收益"),t("br"),v._v("\n很大程度上是网站经营者的一种商业行为，将自己或自己公司的排名前移")]),v._v(" "),t("p",[v._v("试想一下，我们用浏览器搜索时，都发生了什么？")]),v._v(" "),t("ul",[t("li",[v._v("用户输入查询内容")]),v._v(" "),t("li",[v._v("查询处理以及分词技术")]),v._v(" "),t("li",[v._v("确定搜索意图及返回相关、新鲜的内容")])]),v._v(" "),t("p",[v._v("为什么谷歌上可以搜索到整个互联网的内容？")]),v._v(" "),t("p",[v._v("因为，他解析并存储了。"),t("br"),v._v("\n而更有意思的是，他会为同样的内容建立一个索引或者说分类，按照一定的相关性，针对于某个关键词的内容。")]),v._v(" "),t("p",[v._v("PageRank 对于一个网站来说是相当重要的，只是这个相比也比较复杂，"),t("br"),v._v("\n包括其他网站链接向你的网站，以及流量，当然还有域名等等")]),v._v(" "),t("p",[v._v("正常情况下除了像腾讯这类的 QQ 空间自我封闭的网站外都需要 SEO，\n或者不希望泄露一些用户隐私如 Facebook、人人等等")]),v._v(" "),t("blockquote",[t("p",[v._v("SEO 与编程的最大不同之处在于"),t("br"),v._v("\n编程的核心是技术，SEO 的核心是内容")])]),v._v(" "),t("h3",{attrs:{id:"搜索引擎的工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搜索引擎的工作原理"}},[v._v("#")]),v._v(" 搜索引擎的工作原理")]),v._v(" "),t("p",[v._v("在搜索引擎网站的后台会有一个非常庞大的数据库，里面存储了海量的关键词，而每个关键词又对应着很多网址，这些网址是被称之为“搜索引擎蜘蛛”或“网络爬虫”程序从茫茫的互联网上一点一点下载收集而来的。")]),v._v(" "),t("p",[v._v("随着各种各样网站的出现，这些勤劳的“蜘蛛”每天在互联网上爬行，从一个链接到另一个链接，下载其中的内容，进行分析提炼，找到其中的关键词\n如果“蜘蛛”认为关键词在数据库中没有而对用户是有用的便存入后台的数据库中。")]),v._v(" "),t("p",[v._v("反之，如果“蜘蛛”认为是垃圾信息或重复信息，就舍弃不要，继续爬行，寻找最新的、有用的信息保存起来提供用户搜索。")]),v._v(" "),t("p",[v._v("当用户搜索时，就能检索出与关键字相关的网址显示给访客。")]),v._v(" "),t("p",[v._v("一个关键词对用多个网址，因此就出现了排序的问题，相应的当与关键词最吻合的网址就会排在前面了。在“蜘蛛”抓取网页内容，提炼关键词的这个过程中，就存在一个问题：“蜘蛛”能否看懂。如果网站内容是 flash 和 js 等，那么它是看不懂的，会犯迷糊，即使关键字再贴切也没用")]),v._v(" "),t("p",[v._v("相应的，如果网站内容可以被搜索引擎能识别，那么搜索引擎就会提高该网站的权重，增加对该网站的友好度。这样一个过程我们称之为 SEO")]),v._v(" "),t("h3",{attrs:{id:"白帽和黑帽"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#白帽和黑帽"}},[v._v("#")]),v._v(" 白帽和黑帽")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("搜索引擎优化的主要技术手段")]),v._v(" "),t("ul",[t("li",[v._v("黑帽（black hat）")]),v._v(" "),t("li",[v._v("白帽（white hat）")])])]),v._v(" "),t("p",[v._v("通过作弊手法欺骗搜索引擎和访问者，最终将遭到搜索引擎惩罚的手段被称为黑帽，比如隐藏关键字、制造大量的 meta 字、alt 标签等")]),v._v(" "),t("p",[v._v("而通过正规技术和方式，且被搜索引擎所接受的 SEO 技术，称为白帽")]),v._v(" "),t("p",[v._v("当然我们是不支持黑帽这种方式的\n所以这次我们好好聊聊白帽")]),v._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[v._v("值得注意的是：")]),v._v(" "),t("p",[t("em",[v._v("前端是构建网站中很重要的一个环节，前端的工作主要是负责页面的 HTML+CSS+JS，优化好这几个方面会为 SEO 工作打好一个坚实的基础")])]),v._v(" "),t("p",[t("em",[v._v("通过网站的结构布局设计和网页代码优化，使前端页面既能让浏览器用户能够看懂（提升用户体验），也能让“蜘蛛”看懂（提高搜索引擎友好度）")])])]),v._v(" "),t("h3",{attrs:{id:"我们该怎么做"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#我们该怎么做"}},[v._v("#")]),v._v(" 我们该怎么做")]),v._v(" "),t("h4",{attrs:{id:"控制首页链接数量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#控制首页链接数量"}},[v._v("#")]),v._v(" 控制首页链接数量")]),v._v(" "),t("p",[t("strong",[v._v("网站首页是权重最高的地方")])]),v._v(" "),t("p",[v._v("如果首页链接太少，没有“桥”，“蜘蛛”不能继续往下爬到内页，直接影响网站收录数量。")]),v._v(" "),t("p",[v._v("但是首页链接也不能太多，一旦太多，没有实质性的链接，很容易影响用户体验，也会降低网站首页的权重，收录效果也不好")]),v._v(" "),t("h4",{attrs:{id:"扁平化的目录层次"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扁平化的目录层次"}},[v._v("#")]),v._v(" 扁平化的目录层次")]),v._v(" "),t("p",[v._v("尽量让“蜘蛛”只要跳转 3 次，就能到达网站内的任何一个内页")]),v._v(" "),t("h4",{attrs:{id:"对导航的优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对导航的优化"}},[v._v("#")]),v._v(" 对导航的优化")]),v._v(" "),t("p",[v._v("导航应该尽量采用文字方式，也可以搭配图片导航")]),v._v(" "),t("p",[v._v("但是图片代码一定要进行优化， 标签必须添加“alt”和“title”属性，告诉搜索引擎导航的定位，做到即使图片未能正常显示时，用户也能看到提示文字")]),v._v(" "),t("p",[v._v("其次，在每一个网页上应该加上面包屑导航")]),v._v(" "),t("p",[t("strong",[v._v("这样做的好处有什么？")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("从用户体验方面来说，可以让用户了解当前所处的位置以及当前页面在整个网站中的位置\n帮助用户很快了解网站组织形式 从而形成更好的位置感，同时提供了返回各个页面的接口，方便用户操作")])]),v._v(" "),t("li",[t("p",[v._v("对“蜘蛛”而言，能够清楚的了解网站结构，同时还增加了大量的内部链接，方便抓取，降低跳出率")])])]),v._v(" "),t("h4",{attrs:{id:"网站的结构布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网站的结构布局"}},[v._v("#")]),v._v(" 网站的结构布局")]),v._v(" "),t("h3",{attrs:{id:"代码层面的优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码层面的优化"}},[v._v("#")]),v._v(" 代码层面的优化")]),v._v(" "),t("h2",{attrs:{id:"前端鉴权"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端鉴权"}},[v._v("#")]),v._v(" 前端鉴权")]),v._v(" "),t("h3",{attrs:{id:"了解前端鉴权"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#了解前端鉴权"}},[v._v("#")]),v._v(" 了解前端鉴权")]),v._v(" "),t("h3",{attrs:{id:"常见的鉴权方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的鉴权方式"}},[v._v("#")]),v._v(" 常见的鉴权方式")]),v._v(" "),t("h2",{attrs:{id:"模块化开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块化开发"}},[v._v("#")]),v._v(" 模块化开发")]),v._v(" "),t("h2",{attrs:{id:"mvc、mvp、mvm-背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvc、mvp、mvm-背景"}},[v._v("#")]),v._v(" MVC、MVP、MVM 背景")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("MVM 就是一个双向绑定的过程")]),v._v(" "),t("p",[v._v("视图修改数据，数据修改视图")])]),v._v(" "),t("h3",{attrs:{id:"web-1-0-时代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-1-0-时代"}},[v._v("#")]),v._v(" web 1.0 时代")]),v._v(" "),t("p",[v._v("没有前端概念，一个 web 应用采用.asp/java/php 编写"),t("br"),v._v("\n项目可能由多个 jsp/php 文件构成"),t("br"),v._v("\n每个文件中都包含了 HTML、CSS、JS、PHP 等代码")]),v._v(" "),t("p",[v._v("这种架构简单，缺点也非常明显，就是 jsp 代码非常难以维护")]),v._v(" "),t("blockquote",[t("p",[v._v("为了让开发更加便捷，代码更易维护，前端职责更加清晰"),t("br"),v._v("\nMVC 开发模式出现")])]),v._v(" "),t("p",[t("strong",[v._v("前端展示以模板的形式出现，典型的就是 Spring、Stucts、Hibernate")])]),v._v(" "),t("p",[v._v("这种框架职责清晰，代码易维护"),t("br"),v._v("\n但此时的 MVC 仅限于后端，前端只负责 view 层"),t("br"),v._v("\n一切都是由后端在渲染，给前端你的只是模板文件"),t("br"),v._v("\n前端写的都是静态页面，并不需要涉及数据"),t("br"),v._v("\n前端也逐渐沦为了切图仔")]),v._v(" "),t("blockquote",[t("p",[v._v("这种开发模式的缺点也很明显，一是页面开发效率不高，二是前后端职责不清")])]),v._v(" "),t("h3",{attrs:{id:"web-2-0-时代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-2-0-时代"}},[v._v("#")]),v._v(" web 2.0 时代")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("Ajax 出现")]),v._v(" "),t("p",[v._v("局部刷新，带来了更好的体验")])]),v._v(" "),t("p",[v._v("自从谷歌 gmail 的出现，ajax 风靡全球\n这时前后端的职责就更加清晰了\n前端可以通过 ajax 和后端进行数据交互了！")]),v._v(" "),t("p",[v._v("ajax 使页面进行局部刷新，减少了服务端负载和流量消耗，用户体验也极大提升\n这时，专职的前端工程师出现\n同时前端类库也开始大力发展，jQuery 就是最出名！")]),v._v(" "),t("p",[v._v("当然，这种架构还是存在问题")]),v._v(" "),t("ul",[t("li",[v._v("缺乏可行的开发模式承载了更复杂的业务需求")]),v._v(" "),t("li",[v._v("页面内容杂糅在一起")]),v._v(" "),t("li",[v._v("一旦应用规模增大，就变的难以维护")])]),v._v(" "),t("p",[t("strong",[v._v("因此前端 MVC 出现！")])]),v._v(" "),t("h3",{attrs:{id:"前后端分离架构演变"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前后端分离架构演变"}},[v._v("#")]),v._v(" 前后端分离架构演变")]),v._v(" "),t("h4",{attrs:{id:"mvc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[v._v("#")]),v._v(" MVC")]),v._v(" "),t("p",[v._v("前端的 MVC 与后端类似")]),v._v(" "),t("ul",[t("li",[v._v("Model 负责保存应用数据，与后端数据进行同步")]),v._v(" "),t("li",[v._v("Controller 负责业务逻辑，根据用户行为对 Model 数据进行修改")]),v._v(" "),t("li",[v._v("View 负责视图层，将 Model 中的数据可视化")])]),v._v(" "),t("p",[v._v("这种模型，理论上可行，实际开发中，"),t("br"),v._v("\n一个小小的事件操作，都必须经过这样一个流程，"),t("br"),v._v("\n开发变的不再便捷了")]),v._v(" "),t("p",[v._v("还有个大问题，就是")]),v._v(" "),t("p",[v._v("View 比较庞大，而控制层比较单薄，很多开发者会在视图层写一些逻辑代码"),t("br"),v._v("\n这就导致了视图层 view 中的内容越来越大，而 controller 变的越来越单薄")]),v._v(" "),t("p",[v._v("有缺陷就有变革"),t("br"),v._v("\n前端变化中，似乎少了 MVP 模式"),t("br"),v._v("\n是因为 Angular 早早的将 MVVM 框架带入了前端"),t("br"),v._v("\nMVP 模式在前端开发虽不常见，但是在安卓等原生开发中，还是会被考虑")]),v._v(" "),t("p",[t("em",[v._v("那什么是 MVP 呢？")])]),v._v(" "),t("h4",{attrs:{id:"mvp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvp"}},[v._v("#")]),v._v(" MVP")]),v._v(" "),t("p",[v._v("与 MVC 接近，P 指的是 Presenter，P 可以理解为一个中间人"),t("br"),v._v("\n负责和 model 和 view 的双向交互"),t("br"),v._v("\nP 负责的太多了，体积会越来越大")]),v._v(" "),t("p",[v._v("同样体积增加后难以维护")]),v._v(" "),t("p",[v._v("要解决这些问题，还得从 MVVM 思想中找啊")]),v._v(" "),t("h4",{attrs:{id:"mvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvm"}},[v._v("#")]),v._v(" MVM")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("什么是 MVM ？")]),v._v(" "),t("ul",[t("li",[v._v("Model")]),v._v(" "),t("li",[v._v("View")]),v._v(" "),t("li",[v._v("ViewModel")])])]),v._v(" "),t("p",[v._v("ViewModel 通过实现了一套数据响应机制自动响应 Model 中数据的变化"),t("br"),v._v("\n同时 ViewModel 会实现一套自动更新策略自动将数据变化转为视图更新")]),v._v(" "),t("p",[v._v("通过事件监听响应 view 中用户修改 Model 中的数据")]),v._v(" "),t("blockquote",[t("p",[v._v("这样 ViewModel 中就减少了大量的 DOM 操作"),t("br"),v._v("\nMVVM 保持了 view 和 model 松耦合的同时，还减少了维护"),t("br"),v._v("\n这简直就是一个革命性的变革")])]),v._v(" "),t("h3",{attrs:{id:"它们之间的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#它们之间的区别"}},[v._v("#")]),v._v(" 它们之间的区别")]),v._v(" "),t("ul",[t("li",[v._v("这三个都是框架模式，设计目标都是为了解决 Model 和 View 的耦合问题")]),v._v(" "),t("li",[v._v("MVC 模式出现较早而且主要应用于后端，它分层清晰，缺点是数据流混乱，维护存在问题")]),v._v(" "),t("li",[v._v("MVP 模式是 MVC 的进化形式，Presenter 作为中间层通信，解决了两者的耦合问题，但 P 层会过于臃肿导致维护问题")]),v._v(" "),t("li",[v._v("MVVM 模式在前端领域广泛应用，不仅解决了 MV 耦合问题，还同时解决了维护两者映射关系的大量繁杂代码和 DOM 操作，提高了开发效率的同时，还保持了优越性能的表现")])])])}),[],!1,null,null,null);a.default=s.exports}}]);